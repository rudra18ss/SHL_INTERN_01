{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "935e2e77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:34:44.345956Z",
     "iopub.status.busy": "2025-04-09T06:34:44.345725Z",
     "iopub.status.idle": "2025-04-09T06:34:44.362743Z",
     "shell.execute_reply": "2025-04-09T06:34:44.362025Z"
    },
    "id": "sK7cbZGhjLmM",
    "papermill": {
     "duration": 0.023521,
     "end_time": "2025-04-09T06:34:44.363933",
     "exception": false,
     "start_time": "2025-04-09T06:34:44.340412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train CSV: True\n",
      "Test CSV: True\n",
      "Train Audio Folder Exists: True\n",
      "Test Audio Folder Exists: True\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "data_path = '/kaggle/input/new-dataset/dataset/'\n",
    "\n",
    "# Check contents\n",
    "print(\"Train CSV:\", os.path.exists(data_path + 'train.csv'))\n",
    "print(\"Test CSV:\", os.path.exists(data_path + 'test.csv'))\n",
    "print(\"Train Audio Folder Exists:\", os.path.exists(data_path + 'audios_train'))\n",
    "print(\"Test Audio Folder Exists:\", os.path.exists(data_path + 'audios_test'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52de7796",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:34:44.373443Z",
     "iopub.status.busy": "2025-04-09T06:34:44.373251Z",
     "iopub.status.idle": "2025-04-09T06:34:45.687262Z",
     "shell.execute_reply": "2025-04-09T06:34:45.686390Z"
    },
    "id": "Mr2XO3q2odJu",
    "papermill": {
     "duration": 1.3198,
     "end_time": "2025-04-09T06:34:45.688754",
     "exception": false,
     "start_time": "2025-04-09T06:34:44.368954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Data Sample:\n",
      "         filename  label\n",
      "0  audio_1261.wav    1.0\n",
      "1   audio_942.wav    1.5\n",
      "2  audio_1110.wav    1.5\n",
      "3  audio_1024.wav    1.5\n",
      "4   audio_538.wav    2.0\n",
      "\n",
      "Test Data Sample:\n",
      "         filename\n",
      "0   audio_706.wav\n",
      "1   audio_800.wav\n",
      "2    audio_68.wav\n",
      "3  audio_1267.wav\n",
      "4   audio_683.wav\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "train_df = pd.read_csv(data_path + 'train.csv')\n",
    "test_df = pd.read_csv(data_path + 'test.csv')\n",
    "\n",
    "print(\"Train Data Sample:\")\n",
    "print(train_df.head())\n",
    "\n",
    "print(\"\\nTest Data Sample:\")\n",
    "print(test_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2311654e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:34:45.698416Z",
     "iopub.status.busy": "2025-04-09T06:34:45.698133Z",
     "iopub.status.idle": "2025-04-09T06:34:51.579718Z",
     "shell.execute_reply": "2025-04-09T06:34:51.578452Z"
    },
    "id": "JW0IArjjptaL",
    "papermill": {
     "duration": 5.888908,
     "end_time": "2025-04-09T06:34:51.581858",
     "exception": false,
     "start_time": "2025-04-09T06:34:45.692950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!pip install librosa soundfile --quiet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5f562ffc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:34:51.591101Z",
     "iopub.status.busy": "2025-04-09T06:34:51.590794Z",
     "iopub.status.idle": "2025-04-09T06:34:51.640716Z",
     "shell.execute_reply": "2025-04-09T06:34:51.639833Z"
    },
    "id": "zyUr06pZp51A",
    "papermill": {
     "duration": 0.055983,
     "end_time": "2025-04-09T06:34:51.642160",
     "exception": false,
     "start_time": "2025-04-09T06:34:51.586177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import librosa\n",
    "import numpy as np\n",
    "import soundfile as sf\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "546f75d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:34:51.650829Z",
     "iopub.status.busy": "2025-04-09T06:34:51.650597Z",
     "iopub.status.idle": "2025-04-09T06:34:51.655533Z",
     "shell.execute_reply": "2025-04-09T06:34:51.654734Z"
    },
    "id": "OaAB142op7GZ",
    "papermill": {
     "duration": 0.010548,
     "end_time": "2025-04-09T06:34:51.656835",
     "exception": false,
     "start_time": "2025-04-09T06:34:51.646287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def extract_features(file_path, max_len=300):\n",
    "    try:\n",
    "        # Load audio\n",
    "        audio, sr = librosa.load(file_path, sr=16000)\n",
    "\n",
    "        # Extract MFCCs\n",
    "        mfcc = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=40)\n",
    "\n",
    "        # Transpose to shape (timesteps, features)\n",
    "        mfcc = mfcc.T\n",
    "\n",
    "        # Padding or truncating to fixed length\n",
    "        if len(mfcc) < max_len:\n",
    "            pad_width = max_len - len(mfcc)\n",
    "            mfcc = np.pad(mfcc, ((0, pad_width), (0, 0)), mode='constant')\n",
    "        else:\n",
    "            mfcc = mfcc[:max_len]\n",
    "\n",
    "        return mfcc\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error processing {file_path}: {e}\")\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "03e2e052",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:34:51.665134Z",
     "iopub.status.busy": "2025-04-09T06:34:51.664886Z",
     "iopub.status.idle": "2025-04-09T06:35:09.771756Z",
     "shell.execute_reply": "2025-04-09T06:35:09.770729Z"
    },
    "id": "h-r8R5xkp9JR",
    "papermill": {
     "duration": 18.112837,
     "end_time": "2025-04-09T06:35:09.773517",
     "exception": false,
     "start_time": "2025-04-09T06:34:51.660680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MFCC Shape: (300, 40)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_file = data_path + 'audios_train/' + train_df['filename'].iloc[0]\n",
    "mfcc_sample = extract_features(sample_file)\n",
    "\n",
    "print(\"MFCC Shape:\", mfcc_sample.shape)\n",
    "\n",
    "# Optional: Visualize\n",
    "plt.imshow(mfcc_sample.T, aspect='auto', origin='lower')\n",
    "plt.title('MFCC of Sample Audio')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('MFCC Coefficients')\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a54a2f32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:35:09.787366Z",
     "iopub.status.busy": "2025-04-09T06:35:09.786932Z",
     "iopub.status.idle": "2025-04-09T06:36:02.283173Z",
     "shell.execute_reply": "2025-04-09T06:36:02.282303Z"
    },
    "id": "aWoKt3X2p_Ks",
    "papermill": {
     "duration": 52.504336,
     "end_time": "2025-04-09T06:36:02.284488",
     "exception": false,
     "start_time": "2025-04-09T06:35:09.780152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting features from audio files...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 444/444 [00:52<00:00,  8.46it/s]\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm\n",
    "\n",
    "X_train = []\n",
    "y_train = []\n",
    "\n",
    "print(\"Extracting features from audio files...\")\n",
    "\n",
    "for i in tqdm(range(len(train_df))):\n",
    "    file_name = train_df.loc[i, 'filename']\n",
    "    file_path = os.path.join(data_path, 'audios_train', file_name)\n",
    "\n",
    "    features = extract_features(file_path)\n",
    "\n",
    "    if features is not None:\n",
    "        X_train.append(features)\n",
    "        y_train.append(train_df.loc[i, 'label'])  # adjust column name if needed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "14efc069",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:36:02.319587Z",
     "iopub.status.busy": "2025-04-09T06:36:02.319352Z",
     "iopub.status.idle": "2025-04-09T06:36:02.335721Z",
     "shell.execute_reply": "2025-04-09T06:36:02.335089Z"
    },
    "id": "gSPn41HEqlxZ",
    "papermill": {
     "duration": 0.033982,
     "end_time": "2025-04-09T06:36:02.336791",
     "exception": false,
     "start_time": "2025-04-09T06:36:02.302809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (444, 300, 40)\n",
      "y_train shape: (444,)\n"
     ]
    }
   ],
   "source": [
    "X_train = np.array(X_train)\n",
    "y_train = np.array(y_train)\n",
    "\n",
    "print(\"X_train shape:\", X_train.shape)  # (num_samples, time_steps, mfcc_features)\n",
    "print(\"y_train shape:\", y_train.shape)  # (num_samples,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8daff61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:36:02.369615Z",
     "iopub.status.busy": "2025-04-09T06:36:02.369376Z",
     "iopub.status.idle": "2025-04-09T06:36:20.426257Z",
     "shell.execute_reply": "2025-04-09T06:36:20.425546Z"
    },
    "id": "79vMu_iksKUM",
    "papermill": {
     "duration": 18.074935,
     "end_time": "2025-04-09T06:36:20.427748",
     "exception": false,
     "start_time": "2025-04-09T06:36:02.352813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b6db7152",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:36:20.461189Z",
     "iopub.status.busy": "2025-04-09T06:36:20.460693Z",
     "iopub.status.idle": "2025-04-09T06:36:20.464530Z",
     "shell.execute_reply": "2025-04-09T06:36:20.463651Z"
    },
    "id": "fDnCZ7yasPas",
    "papermill": {
     "duration": 0.02144,
     "end_time": "2025-04-09T06:36:20.465738",
     "exception": false,
     "start_time": "2025-04-09T06:36:20.444298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated X_train shape: (444, 300, 40, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train = X_train[..., np.newaxis]\n",
    "print(\"Updated X_train shape:\", X_train.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51fe5fae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:36:20.498831Z",
     "iopub.status.busy": "2025-04-09T06:36:20.498602Z",
     "iopub.status.idle": "2025-04-09T06:36:24.349256Z",
     "shell.execute_reply": "2025-04-09T06:36:24.348345Z"
    },
    "id": "2huQGwsWsWPb",
    "papermill": {
     "duration": 3.869028,
     "end_time": "2025-04-09T06:36:24.350827",
     "exception": false,
     "start_time": "2025-04-09T06:36:20.481799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "model = Sequential([\n",
    "    Conv2D(32, (3, 3), activation='relu', input_shape=X_train.shape[1:]),\n",
    "    BatchNormalization(),\n",
    "    MaxPooling2D(pool_size=(2, 2)),\n",
    "\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    MaxPooling2D(pool_size=(2, 2)),\n",
    "\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    Dropout(0.3),\n",
    "    Dense(1)  # Single output for regression\n",
    "])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6098efca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:36:24.384390Z",
     "iopub.status.busy": "2025-04-09T06:36:24.384153Z",
     "iopub.status.idle": "2025-04-09T06:36:24.409556Z",
     "shell.execute_reply": "2025-04-09T06:36:24.408928Z"
    },
    "id": "HlT-T1PrsYEj",
    "papermill": {
     "duration": 0.043162,
     "end_time": "2025-04-09T06:36:24.410726",
     "exception": false,
     "start_time": "2025-04-09T06:36:24.367564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">298</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">38</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">298</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">38</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">149</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">19</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)         │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">147</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">17</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">147</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">17</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">73</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37376</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">4,784,256</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m298\u001b[0m, \u001b[38;5;34m38\u001b[0m, \u001b[38;5;34m32\u001b[0m)         │             \u001b[38;5;34m320\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m298\u001b[0m, \u001b[38;5;34m38\u001b[0m, \u001b[38;5;34m32\u001b[0m)         │             \u001b[38;5;34m128\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m149\u001b[0m, \u001b[38;5;34m19\u001b[0m, \u001b[38;5;34m32\u001b[0m)         │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m147\u001b[0m, \u001b[38;5;34m17\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │          \u001b[38;5;34m18,496\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m147\u001b[0m, \u001b[38;5;34m17\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │             \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m73\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m37376\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │       \u001b[38;5;34m4,784,256\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │             \u001b[38;5;34m129\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,803,585</span> (18.32 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,803,585\u001b[0m (18.32 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,803,393</span> (18.32 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,803,393\u001b[0m (18.32 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">192</span> (768.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m192\u001b[0m (768.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ecb5b94a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:36:24.444170Z",
     "iopub.status.busy": "2025-04-09T06:36:24.443929Z",
     "iopub.status.idle": "2025-04-09T06:36:43.043091Z",
     "shell.execute_reply": "2025-04-09T06:36:43.042373Z"
    },
    "id": "cgL3hhjOsaTb",
    "papermill": {
     "duration": 18.617295,
     "end_time": "2025-04-09T06:36:43.044473",
     "exception": false,
     "start_time": "2025-04-09T06:36:24.427178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 407ms/step - loss: 3509.1836 - mae: 29.1355 - val_loss: 2.4101 - val_mae: 1.3314\n",
      "Epoch 2/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 12.2116 - mae: 2.9419 - val_loss: 4.6052 - val_mae: 1.9706\n",
      "Epoch 3/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 5.3385 - mae: 1.8691 - val_loss: 3.2235 - val_mae: 1.6590\n",
      "Epoch 4/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.5698 - mae: 1.6357 - val_loss: 4.8532 - val_mae: 2.1225\n",
      "Epoch 5/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.4597 - mae: 1.6266 - val_loss: 5.7259 - val_mae: 2.3286\n",
      "Epoch 6/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.0606 - mae: 1.4526 - val_loss: 6.0196 - val_mae: 2.3999\n",
      "Epoch 7/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 3.7169 - mae: 1.3610 - val_loss: 6.5259 - val_mae: 2.5056\n",
      "Epoch 8/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.3886 - mae: 1.4994 - val_loss: 7.0274 - val_mae: 2.6157\n",
      "Epoch 9/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.0588 - mae: 1.4026 - val_loss: 6.7079 - val_mae: 2.5545\n",
      "Epoch 10/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.4383 - mae: 1.4603 - val_loss: 7.5272 - val_mae: 2.7155\n",
      "Epoch 11/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.6921 - mae: 1.2582 - val_loss: 7.3593 - val_mae: 2.6839\n",
      "Epoch 12/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.5140 - mae: 1.4655 - val_loss: 7.3127 - val_mae: 2.6760\n",
      "Epoch 13/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.2424 - mae: 1.3676 - val_loss: 7.5285 - val_mae: 2.7203\n",
      "Epoch 14/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 3.8906 - mae: 1.2784 - val_loss: 7.2414 - val_mae: 2.6666\n",
      "Epoch 15/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 3.6994 - mae: 1.2532 - val_loss: 7.2932 - val_mae: 2.6748\n",
      "Epoch 16/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 3.6842 - mae: 1.1904 - val_loss: 6.7626 - val_mae: 2.5742\n",
      "Epoch 17/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.0137 - mae: 1.2771 - val_loss: 6.9044 - val_mae: 2.6066\n",
      "Epoch 18/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.1417 - mae: 1.2735 - val_loss: 7.3151 - val_mae: 2.6816\n",
      "Epoch 19/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 3.6375 - mae: 1.2076 - val_loss: 6.8158 - val_mae: 2.5868\n",
      "Epoch 20/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.1569 - mae: 1.2884 - val_loss: 6.4638 - val_mae: 2.5081\n",
      "Epoch 21/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.1971 - mae: 1.2365 - val_loss: 6.1681 - val_mae: 2.4532\n",
      "Epoch 22/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.6579 - mae: 1.1472 - val_loss: 5.9014 - val_mae: 2.3932\n",
      "Epoch 23/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.1620 - mae: 1.2226 - val_loss: 5.9592 - val_mae: 2.4146\n",
      "Epoch 24/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.9960 - mae: 1.2084 - val_loss: 6.6615 - val_mae: 2.5561\n",
      "Epoch 25/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 3.3754 - mae: 1.0794 - val_loss: 5.9951 - val_mae: 2.4153\n",
      "Epoch 26/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.3366 - mae: 1.2316 - val_loss: 6.2825 - val_mae: 2.4720\n",
      "Epoch 27/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 4.0061 - mae: 1.1846 - val_loss: 6.1748 - val_mae: 2.4544\n",
      "Epoch 28/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - loss: 3.5342 - mae: 1.0770 - val_loss: 5.7490 - val_mae: 2.3633\n",
      "Epoch 29/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.0237 - mae: 1.2246 - val_loss: 5.2424 - val_mae: 2.2475\n",
      "Epoch 30/30\n",
      "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 4.0202 - mae: 1.1700 - val_loss: 5.4169 - val_mae: 2.2912\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_split=0.1,\n",
    "    epochs=30,\n",
    "    batch_size=32\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ae5e768d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:36:43.093743Z",
     "iopub.status.busy": "2025-04-09T06:36:43.093496Z",
     "iopub.status.idle": "2025-04-09T06:37:02.080709Z",
     "shell.execute_reply": "2025-04-09T06:37:02.079729Z"
    },
    "id": "uAgVAyZpsbQI",
    "papermill": {
     "duration": 19.013154,
     "end_time": "2025-04-09T06:37:02.082079",
     "exception": false,
     "start_time": "2025-04-09T06:36:43.068925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 24%|██▍       | 47/195 [00:04<00:12, 12.16it/s]<ipython-input-5-1f229e3e11ae>:4: UserWarning: PySoundFile failed. Trying audioread instead.\n",
      "  audio, sr = librosa.load(file_path, sr=16000)\n",
      "/usr/local/lib/python3.10/dist-packages/librosa/core/audio.py:184: FutureWarning: librosa.core.audio.__audioread_load\n",
      "\tDeprecated as of librosa version 0.10.0.\n",
      "\tIt will be removed in librosa version 1.0.\n",
      "  y, sr_native = __audioread_load(path, offset, duration, dtype)\n",
      " 26%|██▌       | 50/195 [00:04<00:10, 13.83it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_177.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_177.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 38%|███▊      | 75/195 [00:06<00:09, 13.28it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_435.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_435.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 54%|█████▍    | 106/195 [00:09<00:08, 10.73it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_300.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_300.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 61%|██████    | 118/195 [00:11<00:06, 11.20it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_521.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_521.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 63%|██████▎   | 123/195 [00:11<00:05, 13.56it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_165.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_165.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|███████▉  | 154/195 [00:14<00:02, 14.11it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_519.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_519.wav'\n",
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_564.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_564.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 86%|████████▌ | 167/195 [00:15<00:02, 12.63it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_235.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_235.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 91%|█████████▏| 178/195 [00:16<00:01, 13.43it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing /kaggle/input/new-dataset/dataset/audios_test/audio_422.wav: [Errno 2] No such file or directory: '/kaggle/input/new-dataset/dataset/audios_test/audio_422.wav'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 195/195 [00:18<00:00, 10.27it/s]\n"
     ]
    }
   ],
   "source": [
    "missing_files = []\n",
    "\n",
    "X_test = []\n",
    "test_files = []\n",
    "\n",
    "for i in tqdm(range(len(test_df))):\n",
    "    file_name = test_df.loc[i, 'filename']\n",
    "    file_path = os.path.join(data_path, 'audios_test', file_name)\n",
    "\n",
    "    try:\n",
    "        features = extract_features(file_path)\n",
    "        if features is not None:\n",
    "            X_test.append(features)\n",
    "            test_files.append(file_name)\n",
    "    except Exception as e:\n",
    "        print(f\"Skipping {file_name}: {e}\")\n",
    "        missing_files.append(file_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1d3e228b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:37:02.138444Z",
     "iopub.status.busy": "2025-04-09T06:37:02.138189Z",
     "iopub.status.idle": "2025-04-09T06:37:03.210668Z",
     "shell.execute_reply": "2025-04-09T06:37:03.209631Z"
    },
    "id": "yWRCduudvERj",
    "papermill": {
     "duration": 1.102044,
     "end_time": "2025-04-09T06:37:03.212383",
     "exception": false,
     "start_time": "2025-04-09T06:37:02.110339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_test shape: (186, 300, 40, 1)\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 143ms/step\n"
     ]
    }
   ],
   "source": [
    "X_test = np.array(X_test)\n",
    "X_test = X_test[..., np.newaxis]  # Add channel dimension\n",
    "\n",
    "print(\"X_test shape:\", X_test.shape)\n",
    "\n",
    "predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bda7fe57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:37:03.278199Z",
     "iopub.status.busy": "2025-04-09T06:37:03.277885Z",
     "iopub.status.idle": "2025-04-09T06:37:03.289405Z",
     "shell.execute_reply": "2025-04-09T06:37:03.288473Z"
    },
    "id": "EJbQC7mpv4iz",
    "papermill": {
     "duration": 0.044122,
     "end_time": "2025-04-09T06:37:03.290626",
     "exception": false,
     "start_time": "2025-04-09T06:37:03.246504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Predictions saved to: /kaggle/working/grammar_score_predictions.csv\n"
     ]
    }
   ],
   "source": [
    "output_df = pd.DataFrame({\n",
    "    'filename': test_files,  # Only the valid ones\n",
    "    'label': predictions.flatten()\n",
    "})\n",
    "\n",
    "# Save it\n",
    "output_path = os.path.join(data_path,'/kaggle/working/grammar_score_predictions.csv')\n",
    "output_df.to_csv(output_path, index=False)\n",
    "\n",
    "print(f\"✅ Predictions saved to: {output_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e1857468",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:37:03.347073Z",
     "iopub.status.busy": "2025-04-09T06:37:03.346819Z",
     "iopub.status.idle": "2025-04-09T06:37:03.352420Z",
     "shell.execute_reply": "2025-04-09T06:37:03.351527Z"
    },
    "id": "r-S5cpY-wHyj",
    "papermill": {
     "duration": 0.035733,
     "end_time": "2025-04-09T06:37:03.353618",
     "exception": false,
     "start_time": "2025-04-09T06:37:03.317885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Min Score: 1.2878801\n",
      "Max Score: 3.811798\n",
      "Mean Score: 2.3470178\n"
     ]
    }
   ],
   "source": [
    "print(\"Min Score:\", np.min(predictions))\n",
    "print(\"Max Score:\", np.max(predictions))\n",
    "print(\"Mean Score:\", np.mean(predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6055c06b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T06:37:03.409652Z",
     "iopub.status.busy": "2025-04-09T06:37:03.409426Z",
     "iopub.status.idle": "2025-04-09T06:37:03.598209Z",
     "shell.execute_reply": "2025-04-09T06:37:03.597348Z"
    },
    "id": "15xuz5dUxErO",
    "papermill": {
     "duration": 0.218552,
     "end_time": "2025-04-09T06:37:03.599568",
     "exception": false,
     "start_time": "2025-04-09T06:37:03.381016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(predictions, bins=20)\n",
    "plt.title(\"Predicted Grammar Score Distribution\")\n",
    "plt.xlabel(\"Score\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21944686",
   "metadata": {
    "id": "8IYZyWAk1ZUv",
    "papermill": {
     "duration": 0.027782,
     "end_time": "2025-04-09T06:37:03.655438",
     "exception": false,
     "start_time": "2025-04-09T06:37:03.627656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ef29b3a",
   "metadata": {
    "papermill": {
     "duration": 0.027773,
     "end_time": "2025-04-09T06:37:03.711219",
     "exception": false,
     "start_time": "2025-04-09T06:37:03.683446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c67d478",
   "metadata": {
    "papermill": {
     "duration": 0.027959,
     "end_time": "2025-04-09T06:37:03.768528",
     "exception": false,
     "start_time": "2025-04-09T06:37:03.740569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df5f05b4",
   "metadata": {
    "papermill": {
     "duration": 0.027643,
     "end_time": "2025-04-09T06:37:03.824116",
     "exception": false,
     "start_time": "2025-04-09T06:37:03.796473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "authorship_tag": "ABX9TyNg4ocQ4E+WtvDi0lkiD1eV",
   "gpuType": "T4",
   "mount_file_id": "16TYvF0Eds6SarIbDxK7HY4nOQwxbYWox",
   "private_outputs": true,
   "provenance": []
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7074797,
     "sourceId": 11311611,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 146.427249,
   "end_time": "2025-04-09T06:37:07.187124",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-09T06:34:40.759875",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
